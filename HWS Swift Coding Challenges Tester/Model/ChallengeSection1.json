[
 {
	 "title": "Are the letters unique?",
	 "difficulty": "Easy",
	 "question": "Write a function that accepts a String as its only parameter, and returns true if the string has only unique letters, taking letter case into account.",
	 "sample": "The string \"No duplicates\" should return true. The string \"abcdefghijklmnopqrstuvwxyz\" should return true. The string \"AaBbCc\" should return true because the challenge is case-sensitive. The String \"Hello, world\" should return false because of the double Ls and double Os.",
	 "function_placeholder": "func challenge(input: String) -> Bool {",
	 "answer": "return Set(input).count == input.count"
 },
 {
	 "title": "Is a string a palindrome?",
	 "difficulty": "Easy",
	 "question": "Write a function that accepts a String as its only parameter, and returns true if the string reads the same when reversed, ignoring case.",
	 "sample": "The string \"rotator\" shoud return true. The string \"Rats live on no evil star\" should return true. The string \"Never odd or even\" should return false; even though the letters are the same in reverse the spaces are in different places. The string \"Hello, world\" should return false because it reads \"dlrow, olleH\" backwards.",
	 "function_placeholder": "func challenge(input: String) -> Bool {",
	 "answer": "return input.lowercased().reversed() == Array(input.lowercased())"
 },
 {
	 "title": "Do two strings contain the same characters?",
	 "difficulty": "Easy",
	 "question": "Write a function that accepts two String parameters, and returns true if they contain the same characters in any order taking into account letter case.",
	 "sample": "The strings \"abca\" and \"abca\" should return true. The strings \"abc\" and \"cba\" should return true. The strings \"a1 b2\" and \"b 1 a 2\" should return true. The strings \"abc\" and \"abca\" should return false. The strings \"abc\" and \"Abc\" should return false. The strings \"abc\" and \"cbAa\" should return false.",
	 "function_placeholder": "func challenge(string1: String, string2: String) -> Bool {",
	 "answer": "let array1 = Array(string1)\nlet array2 = Array(string2)\nreturn array1.sorted() == array2.sorted()"
 },
 {
	 "title": "Does one string contain another",
	 "difficulty": "Easy",
	 "question": "Write your own version of the contains() method on String that ignores letter case, and without using the existing contains() method.",
	 "sample": "The code \"Hello, world\".fuzzyContains(\"Hello\") should return true. The code \"Hello, world\".fuzzyContains(\"WORLD\") should return true. The code \"Hello, world\".fuzzyContains(\"Goodbye\") should return false.",
	 "function_placeholder": "extension String {\n\nfunc fuzzyContains(_ string: String) -> Bool {",
	 "answer": "return self.uppercased().range(of: string.uppercased()) != nil"
 },
 {
	 "title": "Count the characters",
	 "difficulty": "Tricky",
	 "question": "Write a function that accepts a string, and returns how many times a specific character appears, taking case into account.",
	 "sample": "The letter \"a\" appears twice in \"The rain in Spain\". The letter \"i\" appears four times in \"Mississippi\". The letter \"i\" appears three times in \"Hacking with Swift\".",
	 "function_placeholder": "func challenge(input: String, character: Character) -> Int {",
	 "answer": "return input.reduce(0) {\n  $1 == character ? $0 + 1 : $0\n}"
 },
 {
	 "title": "Remove duplicate letters from a string",
	 "difficulty": "Easy",
	 "question": "Write a function that accepts a string as its input, and returns the same string just with duplicate letters removed.",
	 "sample": "The string \"wombat\" should print \"wombat\". The string \"hello\" should print \"helo\". The string \"Mississippi\" should print \"Misp\".",
	 "function_placeholder": "func challenge(string: String) -> String {",
	 "answer": "var used = [Character]()\nfor letter in string {\n  if !used.contains(letter) {\n    used.append(letter)\n  }\n}\nreturn String(used)"
 },
 {
	 "title": "Condense whitespace",
	 "difficulty": "Easy",
	 "question": "Write a function that accepts a string as its input, and returns the same string just with duplicate letters removed.",
	 "sample": "The string \"a[space][space][space]b[space][space][space]c\" should return \"a[space]b[space]c\". The string \"[space][space][space][space]a\" should return \"[space]a\". The string \"abc\" should return \"abc\".",
	 "function_placeholder": "func challenge(input: String) -> String {",
	 "answer": "var seenSpace = false\nvar returnValue = “”\nvar letter in input {\n  If letter == “ “ {\n    If seenSpace { continue }\n    seenSpace = true\n  } else {\n    seenSpace = false\n  }\n  returnValue.append(letter)\n}\nreturn returnValue"
 },
 {
	 "title": "String is rotated",
	 "difficulty": "Tricky",
	 "question": "Write a function that accepts two strings, and returns true if one string is rotation of the other, taking letter case into account.",
	 "sample": "The string \"abcde\" and \"eabcd\" should return true. The string \"abcdde\" and \"cdeab\" should return true. the string \"abcde\" and \"abced\" should return false; this is not a string rotation. The string \"abc\" and \"a\" should return false; this is not a string rotation.",
	 "function_placeholder": "func challenge(input: String, rotated: String) -> Bool {",
	 "answer": "guard input.count == rotated.count else { return false }\nlet combined = input + input\nreturn combined.contains(rotated)"
 },
 {
	 "title": "Find pangrams",
	 "difficulty": "Tricky",
	 "question": "Write a function that returns true if it is given that is an English pangram, ignoring letter case.",
	 "sample": "The string \"The quick brown fox jumps over the lazy dog\" should return true. The string \"The quick brown fox jumped over the lazy dog\" should return false because it's missing the S.",
	 "function_placeholder": "func challenge(input: String) -> Bool {",
	 "answer": "let set = Set(input.lowercased())\nlet letters = set.filter { $0 >= “a” && <= “z” }\nreturn letters.count == 26"
 },
 {
	 "title": "Vowels and consonants",
	 "difficulty": "Tricky",
	 "question": "Given a string in English, return a tuple containing the number of vowels and consonants.",
	 "sample": "The input \"Swift Coding Challenges\" should return 6 vowels and 15 consonants. The input \"Mississippi\" should return false 4 vowels and 7 consonants.",
	 "function_placeholder": "func challenge(input: String) -> (vowels: Int, consonants: Int) {",
	 "answer": "let vowels = “aeiou”\nlet consonants = “bcdfghjklmnpqrstvwxyz”\nvar vowelCount = 0\nvar consonantCount = 0\nfor letter in input.lowercased() {\n  If vowels.contains(letter) {\n    vowelCount += 1\n  } else if consonants.contain(letter) {\n    consonantCount += 1\n  }\n}\nreturn (vowelCount, consonantCount)"
 },
 {
	 "title": "Three Different Letters",
	 "difficulty": "Tricky",
	 "question": "Write a function that accepts two strings, and returns true if they are identical in length but have no more than three different letters, taking case and string order into account.",
	 "sample": "The strings “Clamp and “Cramp” would return true, because there is one letter difference. The strings “Clamp” and “Crams” would return true, because there are two letter differences. The strings “Clamp” and “Grams” would return true, because there are three letter differences. The strings “Clamp” and “Grans” would return false, because there are four letter differences. The strings “Clamp” and “Clam” would return false, because they are different lengths. The strings “clamp” and “maple” should return false, although they differ by one letter the letters that match are in different positions.",
	 "function_placeholder": "func challenge(first: String, second: String) -> Bool {",
	 "answer": "guard first.count == second.count else { return false }\nlet firstArray = Array(first)\nlet secondArray = Array(second)\nvar differences = 0\nfor (index, letter) in firstArray.enumerated() {\n  If secondArray[index] != letter {\n    differences += 1\n    If differences == 4 {\n      return false\n    }\n  }\n}"
 }
]
